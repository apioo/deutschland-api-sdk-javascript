/**
 * DistrictTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {District} from "./District";
import {DistrictCollection} from "./DistrictCollection";
import {MessageException} from "./MessageException";

export class DistrictTag extends TagAbstract {
    /**
     * Returns a specific district
     *
     * @returns {Promise<District>}
     * @throws {MessageExceptionException}
     * @throws {ClientException}
     */
    public async get(districtId: string): Promise<District> {
        const url = this.parser.url('/district/:district_id', {
            'district_id': districtId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<District>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 400:
                        throw new MessageException(error.response.data);
                    case 404:
                        throw new MessageException(error.response.data);
                    case 500:
                        throw new MessageException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Returns all available districts
     *
     * @returns {Promise<DistrictCollection>}
     * @throws {MessageExceptionException}
     * @throws {ClientException}
     */
    public async getAll(startIndex?: number, state?: string, name?: string): Promise<DistrictCollection> {
        const url = this.parser.url('/district', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
                'startIndex': startIndex,
                'state': state,
                'name': name,
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<DistrictCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 400:
                        throw new MessageException(error.response.data);
                    case 404:
                        throw new MessageException(error.response.data);
                    case 500:
                        throw new MessageException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
