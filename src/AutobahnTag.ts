/**
 * AutobahnTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {AutobahnChargingStationTag} from "./AutobahnChargingStationTag";
import {AutobahnClosureTag} from "./AutobahnClosureTag";
import {AutobahnCollection} from "./AutobahnCollection";
import {AutobahnParkingLorryTag} from "./AutobahnParkingLorryTag";
import {AutobahnWarningTag} from "./AutobahnWarningTag";
import {ResponseException} from "./ResponseException";

export class AutobahnTag extends TagAbstract {
    public warning(): AutobahnWarningTag
    {
        return new AutobahnWarningTag(
            this.httpClient,
            this.parser
        );
    }

    public parkingLorry(): AutobahnParkingLorryTag
    {
        return new AutobahnParkingLorryTag(
            this.httpClient,
            this.parser
        );
    }

    public closure(): AutobahnClosureTag
    {
        return new AutobahnClosureTag(
            this.httpClient,
            this.parser
        );
    }

    public chargingStation(): AutobahnChargingStationTag
    {
        return new AutobahnChargingStationTag(
            this.httpClient,
            this.parser
        );
    }

    /**
     * Returns all available autobahns
     *
     * @returns {Promise<AutobahnCollection>}
     * @throws {ResponseException}
     * @throws {ClientException}
     */
    public async getAll(): Promise<AutobahnCollection> {
        const url = this.parser.url('/autobahn', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<AutobahnCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                switch (error.response.status) {
                    case 400:
                        throw new ResponseException(error.response.data);
                    case 404:
                        throw new ResponseException(error.response.data);
                    case 500:
                        throw new ResponseException(error.response.data);
                    default:
                        throw new UnknownStatusCodeException('The server returned an unknown status code');
                }
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
